// 1. 大量ファイル並行処理バッチ
package main

import (
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"runtime"
	"sync"
	"time"
)

func sample1_FileProcessor() {
	startTime := time.Now()
	
	// ワーカープール設定
	numWorkers := runtime.NumCPU()
	filesChan := make(chan string, 100)
	var wg sync.WaitGroup
	
	// ワーカー起動
	for i := 0; i < numWorkers; i++ {
		go func() {
			for filePath := range filesChan {
				processFile(filePath)
				wg.Done()
			}
		}()
	}
	
	// ファイル収集と処理
	err := filepath.WalkDir("./data", func(path string, d fs.DirEntry, err error) error {
		if err != nil || d.IsDir() {
			return err
		}
		wg.Add(1)
		filesChan <- path
		return nil
	})
	
	if err != nil {
		fmt.Printf("Error walking directory: %v\n", err)
	}
	
	close(filesChan)
	wg.Wait()
	
	fmt.Printf("処理完了: %v\n", time.Since(startTime))
}

func processFile(filePath string) {
	// ファイル処理ロジック（例：サイズ計算、形式変換等）
	if info, err := os.Stat(filePath); err == nil {
		fmt.Printf("処理済み: %s (%d bytes)\n", filePath, info.Size())
	}
}
